/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface INurseRaidInterface extends ethers.utils.Interface {
  functions: {
    "checkDone(uint256)": FunctionFragment;
    "create(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "enter(uint256,uint256)": FunctionFragment;
    "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "maid()": FunctionFragment;
    "maidCoin()": FunctionFragment;
    "maidPowerToRaidReducedBlock()": FunctionFragment;
    "nursePart()": FunctionFragment;
    "raidCount()": FunctionFragment;
    "rng()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkDone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterWithPermitAll",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "maid", values?: undefined): string;
  encodeFunctionData(functionFragment: "maidCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maidPowerToRaidReducedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nursePart", values?: undefined): string;
  encodeFunctionData(functionFragment: "raidCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "rng", values?: undefined): string;

  decodeFunctionResult(functionFragment: "checkDone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterWithPermitAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maidCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maidPowerToRaidReducedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nursePart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raidCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rng", data: BytesLike): Result;

  events: {
    "ChangeMaidPowerToRaidReducedBlock(uint256)": EventFragment;
    "Create(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Enter(address,uint256,uint256)": EventFragment;
    "Exit(address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangeMaidPowerToRaidReducedBlock"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Enter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
}

export class INurseRaid extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: INurseRaidInterface;

  functions: {
    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enter(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enter(uint256,uint256)"(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterWithPermitAll(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exit(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maid(overrides?: CallOverrides): Promise<[string]>;

    "maid()"(overrides?: CallOverrides): Promise<[string]>;

    maidCoin(overrides?: CallOverrides): Promise<[string]>;

    "maidCoin()"(overrides?: CallOverrides): Promise<[string]>;

    maidPowerToRaidReducedBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nursePart(overrides?: CallOverrides): Promise<[string]>;

    "nursePart()"(overrides?: CallOverrides): Promise<[string]>;

    raidCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "raidCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rng(overrides?: CallOverrides): Promise<[string]>;

    "rng()"(overrides?: CallOverrides): Promise<[string]>;
  };

  checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "checkDone(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    entranceFee: BigNumberish,
    nursePart: BigNumberish,
    maxRewardCount: BigNumberish,
    duration: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(uint256,uint256,uint256,uint256,uint256)"(
    entranceFee: BigNumberish,
    nursePart: BigNumberish,
    maxRewardCount: BigNumberish,
    duration: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enter(
    id: BigNumberish,
    maid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enter(uint256,uint256)"(
    id: BigNumberish,
    maid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterWithPermitAll(
    id: BigNumberish,
    _maid: BigNumberish,
    deadline: BigNumberish,
    v1: BigNumberish,
    r1: BytesLike,
    s1: BytesLike,
    v2: BigNumberish,
    r2: BytesLike,
    s2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
    id: BigNumberish,
    _maid: BigNumberish,
    deadline: BigNumberish,
    v1: BigNumberish,
    r1: BytesLike,
    s1: BytesLike,
    v2: BigNumberish,
    r2: BytesLike,
    s2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exit(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "exit(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maid(overrides?: CallOverrides): Promise<string>;

  "maid()"(overrides?: CallOverrides): Promise<string>;

  maidCoin(overrides?: CallOverrides): Promise<string>;

  "maidCoin()"(overrides?: CallOverrides): Promise<string>;

  maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "maidPowerToRaidReducedBlock()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nursePart(overrides?: CallOverrides): Promise<string>;

  "nursePart()"(overrides?: CallOverrides): Promise<string>;

  raidCount(overrides?: CallOverrides): Promise<BigNumber>;

  "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  rng(overrides?: CallOverrides): Promise<string>;

  "rng()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enter(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enter(uint256,uint256)"(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterWithPermitAll(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    maid(overrides?: CallOverrides): Promise<string>;

    "maid()"(overrides?: CallOverrides): Promise<string>;

    maidCoin(overrides?: CallOverrides): Promise<string>;

    "maidCoin()"(overrides?: CallOverrides): Promise<string>;

    maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nursePart(overrides?: CallOverrides): Promise<string>;

    "nursePart()"(overrides?: CallOverrides): Promise<string>;

    raidCount(overrides?: CallOverrides): Promise<BigNumber>;

    "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    rng(overrides?: CallOverrides): Promise<string>;

    "rng()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ChangeMaidPowerToRaidReducedBlock(value: null): EventFilter;

    Create(
      id: BigNumberish | null,
      entranceFee: null,
      nursePart: BigNumberish | null,
      maxRewardCount: null,
      duration: null,
      endBlock: null
    ): EventFilter;

    Enter(
      challenger: string | null,
      id: BigNumberish | null,
      maid: BigNumberish | null
    ): EventFilter;

    Exit(challenger: string | null, id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enter(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enter(uint256,uint256)"(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterWithPermitAll(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exit(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maid(overrides?: CallOverrides): Promise<BigNumber>;

    "maid()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "maidCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nursePart(overrides?: CallOverrides): Promise<BigNumber>;

    "nursePart()"(overrides?: CallOverrides): Promise<BigNumber>;

    raidCount(overrides?: CallOverrides): Promise<BigNumber>;

    "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    rng(overrides?: CallOverrides): Promise<BigNumber>;

    "rng()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkDone(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enter(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enter(uint256,uint256)"(
      id: BigNumberish,
      maid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterWithPermitAll(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enterWithPermitAll(uint256,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      _maid: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exit(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maidCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maidCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maidPowerToRaidReducedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nursePart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nursePart()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raidCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "raidCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rng(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rng()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
