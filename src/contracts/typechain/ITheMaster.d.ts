/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITheMasterInterface extends ethers.utils.Interface {
  functions: {
    "add(address,bool,bool,address,uint8,uint256)": FunctionFragment;
    "changeRewardCalculator(address)": FunctionFragment;
    "decreasingInterval()": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "desupport(uint256,uint256)": FunctionFragment;
    "emergencyDesupport(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "initialRewardPerBlock()": FunctionFragment;
    "maidCoin()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintableByAddr(address)": FunctionFragment;
    "pendingReward(uint256,uint256)": FunctionFragment;
    "poolCount()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "rewardCalculator()": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "support(uint256,uint256,uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "userInfo(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [string, boolean, boolean, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermitMax",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "desupport",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDesupport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialRewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maidCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintableByAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "support",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermitMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "desupport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDesupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maidCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintableByAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Add(uint256,address,bool,bool,address,uint8,uint256)": EventFragment;
    "ChangeRewardCalculator(address)": EventFragment;
    "Deposit(uint256,uint256,uint256)": EventFragment;
    "Desupport(address,uint256,uint256)": EventFragment;
    "EmergencyDesupport(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Set(uint256,uint256)": EventFragment;
    "SetIsSupporterPool(uint256,bool)": EventFragment;
    "Support(address,uint256,uint256)": EventFragment;
    "Withdraw(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeRewardCalculator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Desupport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyDesupport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsSupporterPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Support"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ITheMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITheMasterInterface;

  functions: {
    add(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,bool,bool,address,uint8,uint256)"(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeRewardCalculator(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRewardCalculator(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreasingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decreasingInterval()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWithPermitMax(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    desupport(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "desupport(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyDesupport(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyDesupport(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialRewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialRewardPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maidCoin(overrides?: CallOverrides): Promise<[string]>;

    "maidCoin()"(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintableByAddr(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    "mintableByAddr(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingReward(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingReward(uint256,uint256)"(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        delegate: boolean;
        supportable: string;
        supportingRatio: number;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        supply: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        delegate: boolean;
        supportable: string;
        supportingRatio: number;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        supply: BigNumber;
      }
    >;

    rewardCalculator(overrides?: CallOverrides): Promise<[string]>;

    "rewardCalculator()"(overrides?: CallOverrides): Promise<[string]>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    support(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "support(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,uint256)"(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    addr: string,
    delegate: boolean,
    mintable: boolean,
    supportable: string,
    supportingRatio: BigNumberish,
    allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,bool,bool,address,uint8,uint256)"(
    addr: string,
    delegate: boolean,
    mintable: boolean,
    supportable: string,
    supportingRatio: BigNumberish,
    allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeRewardCalculator(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRewardCalculator(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreasingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "decreasingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWithPermit(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWithPermitMax(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  desupport(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "desupport(uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyDesupport(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyDesupport(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "initialRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  maidCoin(overrides?: CallOverrides): Promise<string>;

  "maidCoin()"(overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintableByAddr(addr: string, overrides?: CallOverrides): Promise<boolean>;

  "mintableByAddr(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingReward(
    pid: BigNumberish,
    userId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,uint256)"(
    pid: BigNumberish,
    userId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  "poolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      delegate: boolean;
      supportable: string;
      supportingRatio: number;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      supply: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      delegate: boolean;
      supportable: string;
      supportingRatio: number;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      supply: BigNumber;
    }
  >;

  rewardCalculator(overrides?: CallOverrides): Promise<string>;

  "rewardCalculator()"(overrides?: CallOverrides): Promise<string>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    pid: BigNumberish,
    allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256)"(
    pid: BigNumberish,
    allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  support(
    pid: BigNumberish,
    amount: BigNumberish,
    supportTo: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "support(uint256,uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    supportTo: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    pid: BigNumberish,
    user: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,uint256)"(
    pid: BigNumberish,
    user: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    userId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(address,bool,bool,address,uint8,uint256)"(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardCalculator(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeRewardCalculator(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "decreasingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermitMax(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    desupport(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "desupport(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyDesupport(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyDesupport(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "initialRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidCoin(overrides?: CallOverrides): Promise<string>;

    "maidCoin()"(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintableByAddr(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "mintableByAddr(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingReward(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,uint256)"(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "poolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        delegate: boolean;
        supportable: string;
        supportingRatio: number;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        supply: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        delegate: boolean;
        supportable: string;
        supportingRatio: number;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        supply: BigNumber;
      }
    >;

    rewardCalculator(overrides?: CallOverrides): Promise<string>;

    "rewardCalculator()"(overrides?: CallOverrides): Promise<string>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    support(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "support(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,uint256)"(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Add(
      pid: BigNumberish | null,
      addr: null,
      delegate: boolean | null,
      mintable: boolean | null,
      supportable: null,
      supportingRatio: null,
      allocPoint: null
    ): EventFilter;

    ChangeRewardCalculator(addr: null): EventFilter;

    Deposit(
      userId: BigNumberish | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    Desupport(
      supporter: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyDesupport(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    Set(pid: BigNumberish | null, allocPoint: null): EventFilter;

    SetIsSupporterPool(
      pid: BigNumberish | null,
      status: boolean | null
    ): EventFilter;

    Support(
      supporter: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    Withdraw(
      userId: BigNumberish | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    add(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,bool,bool,address,uint8,uint256)"(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeRewardCalculator(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeRewardCalculator(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreasingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "decreasingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWithPermitMax(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    desupport(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "desupport(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyDesupport(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyDesupport(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "initialRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "maidCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintableByAddr(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mintableByAddr(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,uint256)"(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "poolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardCalculator()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    support(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "support(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,uint256)"(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,bool,bool,address,uint8,uint256)"(
      addr: string,
      delegate: boolean,
      mintable: boolean,
      supportable: string,
      supportingRatio: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeRewardCalculator(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRewardCalculator(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreasingInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decreasingInterval()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWithPermit(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWithPermitMax(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWithPermitMax(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    desupport(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "desupport(uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyDesupport(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyDesupport(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialRewardPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialRewardPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maidCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maidCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintableByAddr(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintableByAddr(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReward(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,uint256)"(
      pid: BigNumberish,
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardCalculator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256)"(
      pid: BigNumberish,
      allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    support(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "support(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      supportTo: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,uint256)"(
      pid: BigNumberish,
      user: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      userId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
